const fs = require('fs');
const db = require('./src/models');
const { Op } = require('sequelize');

async function smartMatchFirstResponses() {
  try {
    console.log('ÂºÄÂßãÊô∫ËÉΩÂåπÈÖçÈ¶ñÂè•ÂõûÂ§ç...');
    
    // ËØªÂèñÊèêÂèñÁöÑÊï∞ÊçÆ
    const firstResponsesData = JSON.parse(fs.readFileSync('./firstResponsesData.json', 'utf8'));
    
    // ËøûÊé•Êï∞ÊçÆÂ∫ì
    await db.sequelize.authenticate();
    console.log('Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü');

    // Ëé∑ÂèñÊâÄÊúâÊ†∏ÂøÉÊÑèÂõæÂíåÈùûÊ†∏ÂøÉÊÑèÂõæ
    const allCoreIntents = await db.CoreIntent.findAll({
      attributes: ['id', 'name']
    });
    
    const allNonCoreIntents = await db.NonCoreIntent.findAll({
      attributes: ['id', 'name']
    });

    console.log(`Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑÊÑèÂõæÔºöÊ†∏ÂøÉÊÑèÂõæ ${allCoreIntents.length} ‰∏™ÔºåÈùûÊ†∏ÂøÉÊÑèÂõæ ${allNonCoreIntents.length} ‰∏™`);

    // Êô∫ËÉΩÂåπÈÖçÂáΩÊï∞
    function findBestMatch(csvIntentName, dbIntents) {
      // ÂÆåÂÖ®ÂåπÈÖç
      let exactMatch = dbIntents.find(intent => intent.name === csvIntentName);
      if (exactMatch) return exactMatch;

      // ÂåÖÂê´ÂåπÈÖçÔºàÊï∞ÊçÆÂ∫ìÂêçÁß∞ÂåÖÂê´CSVÂêçÁß∞Ôºâ
      let containsMatch = dbIntents.find(intent => intent.name.includes(csvIntentName));
      if (containsMatch) return containsMatch;

      // Ë¢´ÂåÖÂê´ÂåπÈÖçÔºàCSVÂêçÁß∞ÂåÖÂê´Êï∞ÊçÆÂ∫ìÂêçÁß∞Ôºâ
      let reverseContainsMatch = dbIntents.find(intent => csvIntentName.includes(intent.name));
      if (reverseContainsMatch) return reverseContainsMatch;

      // ÂÖ≥ÈîÆËØçÂåπÈÖç
      const csvKeywords = csvIntentName.split(/[^\u4e00-\u9fa5a-zA-Z0-9]/).filter(k => k.length > 0);
      let keywordMatch = dbIntents.find(intent => {
        const intentKeywords = intent.name.split(/[^\u4e00-\u9fa5a-zA-Z0-9]/).filter(k => k.length > 0);
        return csvKeywords.some(csvKw => intentKeywords.some(intentKw => 
          csvKw === intentKw || csvKw.includes(intentKw) || intentKw.includes(csvKw)
        ));
      });
      if (keywordMatch) return keywordMatch;

      return null;
    }

    // ÂåπÈÖçÊ†∏ÂøÉÊÑèÂõæ
    console.log('\n========== ÂåπÈÖçÊ†∏ÂøÉÊÑèÂõæ ==========');
    const coreMatches = [];
    
    for (const csvIntent of firstResponsesData.core) {
      const match = findBestMatch(csvIntent.intentName, allCoreIntents);
      
      if (match) {
        coreMatches.push({
          csvId: csvIntent.intentId,
          csvName: csvIntent.intentName,
          dbId: match.id,
          dbName: match.name,
          firstResponse: csvIntent.firstResponse,
          subtype: csvIntent.subtype
        });
        console.log(`‚úÖ "${csvIntent.intentName}" -> "${match.name}" (ID: ${match.id})`);
      } else {
        console.log(`‚ùå Êú™ÊâæÂà∞ÂåπÈÖç: "${csvIntent.intentName}"`);
      }
    }

    // ÂåπÈÖçÈùûÊ†∏ÂøÉÊÑèÂõæ
    console.log('\n========== ÂåπÈÖçÈùûÊ†∏ÂøÉÊÑèÂõæ ==========');
    const nonCoreMatches = [];
    
    for (const csvIntent of firstResponsesData.nonCore) {
      const match = findBestMatch(csvIntent.intentName, allNonCoreIntents);
      
      if (match) {
        nonCoreMatches.push({
          csvId: csvIntent.intentId,
          csvName: csvIntent.intentName,
          dbId: match.id,
          dbName: match.name,
          firstResponse: csvIntent.firstResponse,
          subtype: csvIntent.subtype
        });
        console.log(`‚úÖ "${csvIntent.intentName}" -> "${match.name}" (ID: ${match.id})`);
      } else {
        console.log(`‚ùå Êú™ÊâæÂà∞ÂåπÈÖç: "${csvIntent.intentName}"`);
      }
    }

    console.log(`\nÂåπÈÖçÁªìÊûú: Ê†∏ÂøÉÊÑèÂõæ ${coreMatches.length}/${firstResponsesData.core.length}, ÈùûÊ†∏ÂøÉÊÑèÂõæ ${nonCoreMatches.length}/${firstResponsesData.nonCore.length}`);

    // Êõ¥Êñ∞Êï∞ÊçÆÂ∫ì
    let coreUpdated = 0;
    let nonCoreUpdated = 0;

    if (coreMatches.length > 0) {
      console.log('\nÊ≠£Âú®Êõ¥Êñ∞Ê†∏ÂøÉÊÑèÂõæÈ¶ñÂè•ÂõûÂ§ç...');
      for (const match of coreMatches) {
        try {
          console.log(`Ê≠£Âú®Êõ¥Êñ∞ ID: ${match.dbId}, ÂêçÁß∞: "${match.dbName}", È¶ñÂè•ÂõûÂ§ç: "${match.firstResponse}"`);
          
          const [updatedRows] = await db.CoreIntent.update(
            { 
              firstResponse: match.firstResponse,
              responseType: 'immediate'
            },
            { 
              where: { id: match.dbId }
            }
          );
          
          console.log(`Êõ¥Êñ∞ÁªìÊûú: ${updatedRows} Ë°åÂèóÂΩ±Âìç`);
          
          if (updatedRows > 0) {
            coreUpdated++;
            console.log(`‚úÖ Êõ¥Êñ∞ÊàêÂäü "${match.dbName}" (ID: ${match.dbId}): "${match.firstResponse}"`);
          } else {
            console.log(`‚ö†Ô∏è  Êõ¥Êñ∞Â§±Ë¥•ÔºåÊ≤°ÊúâË°åÂèóÂΩ±Âìç: "${match.dbName}" (ID: ${match.dbId})`);
          }
        } catch (error) {
          console.error(`‚ùå Êõ¥Êñ∞ÂºÇÂ∏∏ "${match.dbName}":`, error.message);
        }
      }
    }

    if (nonCoreMatches.length > 0) {
      console.log('\nÊ≠£Âú®Êõ¥Êñ∞ÈùûÊ†∏ÂøÉÊÑèÂõæÈ¶ñÂè•ÂõûÂ§ç...');
      for (const match of nonCoreMatches) {
        try {
          const [updatedRows] = await db.NonCoreIntent.update(
            { 
              firstResponse: match.firstResponse,
              responseType: 'immediate'
            },
            { 
              where: { id: match.dbId }
            }
          );
          
          if (updatedRows > 0) {
            nonCoreUpdated++;
            console.log(`‚úÖ Êõ¥Êñ∞ "${match.dbName}" (ID: ${match.dbId}): "${match.firstResponse}"`);
          }
        } catch (error) {
          console.error(`‚ùå Êõ¥Êñ∞Â§±Ë¥• "${match.dbName}":`, error.message);
        }
      }
    }

    // ÁªüËÆ°ÊúÄÁªàÁªìÊûú
    console.log('\n========== ÊúÄÁªàÁªìÊûú ==========');
    console.log(`‚úÖ Ê†∏ÂøÉÊÑèÂõæÊàêÂäüÊõ¥Êñ∞: ${coreUpdated} Êù°`);
    console.log(`‚úÖ ÈùûÊ†∏ÂøÉÊÑèÂõæÊàêÂäüÊõ¥Êñ∞: ${nonCoreUpdated} Êù°`);

    // È™åËØÅÊõ¥Êñ∞ÁªìÊûú
    const coreIntentsWithFirstResponse = await db.CoreIntent.count({
      where: {
        firstResponse: {
          [Op.ne]: null
        }
      }
    });
    
    const nonCoreIntentsWithFirstResponse = await db.NonCoreIntent.count({
      where: {
        firstResponse: {
          [Op.ne]: null
        }
      }
    });

    console.log(`\nüìà Êï∞ÊçÆÂ∫ì‰∏≠Áé∞ÊúâÈ¶ñÂè•ÂõûÂ§ç:`);
    console.log(`   - Ê†∏ÂøÉÊÑèÂõæ: ${coreIntentsWithFirstResponse} Êù°`);
    console.log(`   - ÈùûÊ†∏ÂøÉÊÑèÂõæ: ${nonCoreIntentsWithFirstResponse} Êù°`);

    // ÊòæÁ§∫Êõ¥Êñ∞ÂêéÁöÑÊ†∑‰æãÊï∞ÊçÆ
    console.log('\n========== Êõ¥Êñ∞ÂêéÁöÑÊ†∑‰æãÊï∞ÊçÆ ==========');
    const updatedCoreIntents = await db.CoreIntent.findAll({
      where: {
        firstResponse: {
          [Op.ne]: null
        }
      },
      limit: 8,
      attributes: ['id', 'name', 'firstResponse']
    });

    if (updatedCoreIntents.length > 0) {
      console.log('Ê†∏ÂøÉÊÑèÂõæÈ¶ñÂè•ÂõûÂ§ç:');
      updatedCoreIntents.forEach((intent, index) => {
        console.log(`${index + 1}. ${intent.name} (ID:${intent.id}): "${intent.firstResponse}"`);
      });
    }

    return {
      coreMatches: coreMatches.length,
      nonCoreMatches: nonCoreMatches.length,
      coreUpdated,
      nonCoreUpdated,
      totalCoreWithFirstResponse: coreIntentsWithFirstResponse,
      totalNonCoreWithFirstResponse: nonCoreIntentsWithFirstResponse
    };

  } catch (error) {
    console.error('Êô∫ËÉΩÂåπÈÖçÂ§±Ë¥•:', error);
    throw error;
  }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
  smartMatchFirstResponses()
    .then((result) => {
      console.log('\nüéâ Êô∫ËÉΩÂåπÈÖçÂíåÊõ¥Êñ∞ÂÆåÊàê!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Êìç‰ΩúÂ§±Ë¥•:', error);
      process.exit(1);
    });
}

module.exports = smartMatchFirstResponses;